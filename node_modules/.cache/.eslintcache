[{"/var/www/html/react-shopping-cart/src/index.js":"1","/var/www/html/react-shopping-cart/src/AppList.js":"2","/var/www/html/react-shopping-cart/src/components/Products.js":"3","/var/www/html/react-shopping-cart/src/components/CartItems.js":"4","/var/www/html/react-shopping-cart/src/store/index.js":"5","/var/www/html/react-shopping-cart/src/store/product.js":"6","/var/www/html/react-shopping-cart/src/store/cart.js":"7","/var/www/html/react-shopping-cart/src/store/reducer.js":"8","/var/www/html/react-shopping-cart/src/store/auth.js":"9"},{"size":644,"mtime":1625467679995,"results":"10","hashOfConfig":"11"},{"size":3788,"mtime":1626452427063,"results":"12","hashOfConfig":"11"},{"size":2756,"mtime":1626444427759,"results":"13","hashOfConfig":"11"},{"size":3501,"mtime":1625467679995,"results":"14","hashOfConfig":"11"},{"size":229,"mtime":1625467679999,"results":"15","hashOfConfig":"11"},{"size":2371,"mtime":1625467679999,"results":"16","hashOfConfig":"11"},{"size":5328,"mtime":1625467679999,"results":"17","hashOfConfig":"11"},{"size":338,"mtime":1626452894991,"results":"18","hashOfConfig":"11"},{"size":2057,"mtime":1626454462243,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"dov8an",{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/html/react-shopping-cart/src/index.js",[],["40","41"],"/var/www/html/react-shopping-cart/src/AppList.js",["42","43","44","45","46"],"/var/www/html/react-shopping-cart/src/components/Products.js",[],"/var/www/html/react-shopping-cart/src/components/CartItems.js",[],"/var/www/html/react-shopping-cart/src/store/index.js",[],"/var/www/html/react-shopping-cart/src/store/product.js",[],"/var/www/html/react-shopping-cart/src/store/cart.js",["47"],"import { createSlice } from \"@reduxjs/toolkit\";\n\n// action types\n// we dont need anymore\nlet lastId = 0;\nconst slice = createSlice({\n    name:\"carts\",\n    initialState:{\n        list:[],\n        loading:false,\n        lastFetch:null,\n        lastAdded:null,\n        msg:''\n    },\n    reducers:{\n        added: (carts, action) => {\n            console.log(\"payload\",action.payload);\n\n            if (carts.list.length > 0) {\n                // const index = carts.list.findIndex(function(cart) {\n                //     //console.log(cart.id+\" == \"+action.payload.cart.product_id+\" && \"+cart.user_id+\" == \"+action.payload.cart.user_id);\n                //     console.log(\"tutto \", cart.id === action.payload.cart.product_id && cart.user_id === action.payload.cart.user_id);\n                //     // console.log(\"prima \", cart.id === action.payload.cart.product_id);\n                //     // console.log(\"seconda \", cart.user_id === action.payload.cart.user_id);\n                //     if (parseInt(cart.product_id) === parseInt(action.payload.cart.product_id) && parseInt(cart.user_id) === parseInt(action.payload.cart.user_id)){\n                //         return true;\n                //     }\n                //     return false;\n\n                // });\n\n                const index = carts.list.findIndex((cart) => (parseInt(cart.product_id) === parseInt(action.payload.cart.product_id) && parseInt(cart.user_id) === parseInt(action.payload.cart.user_id)));\n                console.log(index);\n\n          \n                if (index >= 0) {\n                    carts.msg = \"The Article is already added\";\n                    carts.list[index].qta = (carts.list[index].qta ? ++carts.list[index].qta : 1);\n                    carts.list[index].price = (carts.list[index].price ? (carts.list[index].price + action.payload.cart.price) : action.payload.cart.price);\n                    //setCartItems(cartItems_clone);\n                } else {\n                    carts.msg = \"The Article added\";\n                    // setCartItems([...cartItems_clone, { ...product, qta: 1 }]);\n                    carts.list.push({\n                        ...action.payload.cart,\n                    });\n                }\n            } else {\n                carts.msg = \"The Article added\";\n                // setCartItems([{ ...product, qta: 1 }]);\n                carts.list.push({\n                    ...action.payload.cart\n                });\n            }\n\n            carts.lastAdded = { ...action.payload.cart };\n            return carts;\n\n        },\n        fetched: (carts, action) => {\n            console.log(action.payload);\n            carts.list = action.payload;\n            carts.loading = false;\n        },\n        sorted: (carts, action) => {\n\n            carts.list.sort(function (a, b) {\n                if (action.payload.sort === \"asc\") {\n                  return a.price > b.price ? 1 : -1;\n                } else if (action.payload.sort === \"desc\") {\n                  return a.price < b.price ? 1 : -1;\n                } else {\n                  return a.id > b.id ? 1 : -1;\n                }\n            });\n        },\n        removed: (carts, action) => {\n            carts.list = carts.list.filter(cart => action.payload.id !== cart.id);\n            // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n            // carts.list.slice(index,1);\n        },\n        empty: (carts, action) => {\n            //carts.list = [];\n            carts.list = carts.list.filter(cart => action.payload.user_id !== cart.user_id);\n        },\n    }\n});\n\nexport const {added, fetched, removed, sorted, empty} = slice.actions;\n//export const selectAllcarts = state => state.entities.carts;\nexport default slice.reducer;\n\nexport const loadCarts = async (dispatch) => {\n    //const res = await fetch(\"http://localhost:5000/api/products\", { mode: 'no-cors' });\n    const res = await fetch(\"http://localhost:5000/api/carts\");\n    const cart = await res.json();\n\n    console.log('get from api=>', cart);\n    dispatch(fetched(cart));\n    //setProducts(pro);\n};\n\nexport const addCart = async (dispatch, product) => {\n    \n    const cart = {...product, user_id:1, qta:1, product_id:product.id}\n\n    try {\n\n      const res = await fetch(\"http://localhost:5000/api/carts\", { \n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\"\n        },\n        method: \"POST\",\n        body: JSON.stringify(cart)\n      });\n\n      const output = await res.json();\n\n      if(!output.error){\n        dispatch(added({cart}));\n        //loadCarts();\n      }\n\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\nexport const removeCart = async (dispatch, id) => {\n\n    try{\n      const res = await fetch(\"http://localhost:5000/api/carts/\"+id, { method: \"DELETE\" });\n      const output = await res.json();\n      //setMsg(output);\n      if(!output.error){\n        dispatch(removed({id}));\n      }\n    }catch (err) {\n      console.error(err);\n    }\n};\n\nexport const emptyCart = async (dispatch, user_id) => {\n\n    try{\n      const res = await fetch(\"http://localhost:5000/api/carts/all/\"+user_id, { method: \"DELETE\" });\n      const output = await res.json();\n      //setMsg(output);\n      if(!output.error){\n        dispatch(empty({user_id}));\n      }\n    }catch (err) {\n      console.error(err);\n    }\n};","/var/www/html/react-shopping-cart/src/store/reducer.js",[],"/var/www/html/react-shopping-cart/src/store/auth.js",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":22,"column":15,"nodeType":"55","messageId":"56","endLine":22,"endColumn":21},{"ruleId":"53","severity":1,"message":"57","line":24,"column":16,"nodeType":"55","messageId":"56","endLine":24,"endColumn":23},{"ruleId":"53","severity":1,"message":"58","line":35,"column":9,"nodeType":"55","messageId":"56","endLine":35,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":57,"column":6,"nodeType":"61","endLine":57,"endColumn":8,"suggestions":"62"},{"ruleId":"53","severity":1,"message":"63","line":72,"column":9,"nodeType":"55","messageId":"56","endLine":72,"endColumn":18},{"ruleId":"53","severity":1,"message":"64","line":5,"column":5,"nodeType":"55","messageId":"56","endLine":5,"endColumn":11},{"ruleId":"53","severity":1,"message":"65","line":74,"column":15,"nodeType":"55","messageId":"56","endLine":74,"endColumn":19},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'setMsg' is assigned a value but never used.","Identifier","unusedVar","'setAuth' is assigned a value but never used.","'setShowAuthCustom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["68"],"'showModal' is assigned a value but never used.","'lastId' is assigned a value but never used.","'auth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [loadData]",{"range":"71","text":"72"},[1467,1469],"[loadData]"]