{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // action types\n// we dont need anymore\n\nlet lastId = 0;\nconst slice = createSlice({\n  name: \"products\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null\n  },\n  reducers: {\n    productAdded: (products, action) => {\n      products.list.push({\n        id: ++lastId,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    productFetched: (products, action) => {\n      products.list = action.payload;\n    },\n    productSorted: (products, action) => {\n      products.list.sort(function (a, b) {\n        if (action.payload.sort === \"asc\") {\n          return a.price > b.price ? 1 : -1;\n        } else if (action.payload.sort === \"desc\") {\n          return a.price < b.price ? 1 : -1;\n        } else {\n          return a.id > b.id ? 1 : -1;\n        }\n      });\n    },\n    // productResolved: (products, action) => {\n    //     const index = products.list.findIndex(product => action.payload.id !== product.id);\n    //     products.list[index].resolved = true;\n    // },\n    productRemoved: (products, action) => {\n      products.list = products.list.filter(product => action.payload.id !== product.id); // const index = products.list.findIndex(product => action.payload.id !== product.id);\n      // products.list.slice(index,1);\n    }\n  }\n});\nexport const {\n  productAdded,\n  productListed,\n  productRemoved,\n  productSorted\n} = slice.actions; //export const selectAllProducts = state => state.entities.products;\n\nexport default slice.reducer;","map":{"version":3,"sources":["/home/ciro/project/react-shopping-cart/src/store/product.js"],"names":["createSlice","lastId","slice","name","initialState","list","loading","lastFetch","reducers","productAdded","products","action","push","id","description","payload","resolved","productFetched","productSorted","sort","a","b","price","productRemoved","filter","product","productListed","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AACA,IAAIC,MAAM,GAAG,CAAb;AACA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAC,UADiB;AAEtBC,EAAAA,YAAY,EAAC;AACTC,IAAAA,IAAI,EAAC,EADI;AAETC,IAAAA,OAAO,EAAC,KAFC;AAGTC,IAAAA,SAAS,EAAC;AAHD,GAFS;AAOtBC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,YAAY,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAChCD,MAAAA,QAAQ,CAACL,IAAT,CAAcO,IAAd,CAAmB;AACfC,QAAAA,EAAE,EAAC,EAAEZ,MADU;AAEfa,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFb;AAGfE,QAAAA,QAAQ,EAAE;AAHK,OAAnB;AAKH,KAPI;AAQLC,IAAAA,cAAc,EAAE,CAACP,QAAD,EAAWC,MAAX,KAAsB;AAClCD,MAAAA,QAAQ,CAACL,IAAT,GAAgBM,MAAM,CAACI,OAAvB;AACH,KAVI;AAWLG,IAAAA,aAAa,EAAE,CAACR,QAAD,EAAWC,MAAX,KAAsB;AAEjCD,MAAAA,QAAQ,CAACL,IAAT,CAAcc,IAAd,CAAmB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC/B,YAAIV,MAAM,CAACI,OAAP,CAAeI,IAAf,KAAwB,KAA5B,EAAmC;AACjC,iBAAOC,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhC;AACD,SAFD,MAEO,IAAIX,MAAM,CAACI,OAAP,CAAeI,IAAf,KAAwB,MAA5B,EAAoC;AACzC,iBAAOC,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhC;AACD,SAFM,MAEA;AACL,iBAAOF,CAAC,CAACP,EAAF,GAAOQ,CAAC,CAACR,EAAT,GAAc,CAAd,GAAkB,CAAC,CAA1B;AACD;AACJ,OARD;AASH,KAtBI;AAuBL;AACA;AACA;AACA;AACAU,IAAAA,cAAc,EAAE,CAACb,QAAD,EAAWC,MAAX,KAAsB;AAClCD,MAAAA,QAAQ,CAACL,IAAT,GAAgBK,QAAQ,CAACL,IAAT,CAAcmB,MAAd,CAAqBC,OAAO,IAAId,MAAM,CAACI,OAAP,CAAeF,EAAf,KAAsBY,OAAO,CAACZ,EAA9D,CAAhB,CADkC,CAElC;AACA;AACH;AA/BI;AAPa,CAAD,CAAzB;AA0CA,OAAO,MAAM;AAACJ,EAAAA,YAAD;AAAeiB,EAAAA,aAAf;AAA8BH,EAAAA,cAA9B;AAA8CL,EAAAA;AAA9C,IAA+DhB,KAAK,CAACyB,OAA3E,C,CACP;;AACA,eAAezB,KAAK,CAAC0B,OAArB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// action types\n// we dont need anymore\nlet lastId = 0;\nconst slice = createSlice({\n    name:\"products\",\n    initialState:{\n        list:[],\n        loading:false,\n        lastFetch:null\n    },\n    reducers:{\n        productAdded: (products, action) => {\n            products.list.push({\n                id:++lastId,\n                description: action.payload.description,\n                resolved: false\n            });\n        },\n        productFetched: (products, action) => {\n            products.list = action.payload;\n        },\n        productSorted: (products, action) => {\n\n            products.list.sort(function (a, b) {\n                if (action.payload.sort === \"asc\") {\n                  return a.price > b.price ? 1 : -1;\n                } else if (action.payload.sort === \"desc\") {\n                  return a.price < b.price ? 1 : -1;\n                } else {\n                  return a.id > b.id ? 1 : -1;\n                }\n            });\n        },\n        // productResolved: (products, action) => {\n        //     const index = products.list.findIndex(product => action.payload.id !== product.id);\n        //     products.list[index].resolved = true;\n        // },\n        productRemoved: (products, action) => {\n            products.list = products.list.filter(product => action.payload.id !== product.id);\n            // const index = products.list.findIndex(product => action.payload.id !== product.id);\n            // products.list.slice(index,1);\n        },\n    }\n});\n\nexport const {productAdded, productListed, productRemoved, productSorted} = slice.actions;\n//export const selectAllProducts = state => state.entities.products;\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}