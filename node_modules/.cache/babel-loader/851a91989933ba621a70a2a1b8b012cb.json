{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // action types\n// we dont need anymore\n\nlet lastId = 0;\nconst slice = createSlice({\n  name: \"carts\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null,\n    lastAdded: null,\n    msg: ''\n  },\n  reducers: {\n    added: (carts, action) => {\n      console.log(\"payload\", action.payload);\n\n      if (carts.list.length > 0) {\n        const index = carts.list.findIndex(function (cart) {\n          //console.log(cart.id+\" == \"+action.payload.cart.product_id+\" && \"+cart.user_id+\" == \"+action.payload.cart.user_id);\n          console.log(\"tutto \", cart.id === action.payload.cart.product_id && cart.user_id === action.payload.cart.user_id); // console.log(\"prima \", cart.id === action.payload.cart.product_id);\n          // console.log(\"seconda \", cart.user_id === action.payload.cart.user_id);\n\n          if (parseInt(cart.product_id) === parseInt(action.payload.cart.product_id) && parseInt(cart.user_id) === parseInt(action.payload.cart.user_id)) {\n            return true;\n          }\n\n          return false;\n        });\n        console.log(index);\n\n        if (index >= 0) {\n          carts.msg = \"The Article is already added\";\n          carts.list[index].qta = carts.list[index].qta ? ++carts.list[index].qta : 1;\n          carts.list[index].price = carts.list[index].price ? carts.list[index].price + action.payload.cart.price : action.payload.cart.price; //setCartItems(cartItems_clone);\n        } else {\n          carts.msg = \"The Article added\"; // setCartItems([...cartItems_clone, { ...product, qta: 1 }]);\n\n          carts.list.push({ ...action.payload.cart\n          });\n        }\n      } else {\n        carts.msg = \"The Article added\"; // setCartItems([{ ...product, qta: 1 }]);\n\n        carts.list.push({ ...action.payload.cart\n        });\n      }\n\n      carts.lastAdded = { ...action.payload.cart\n      };\n      return carts;\n    },\n    fetched: (carts, action) => {\n      // carts.list = action.payload;\n      carts.list = action.payload;\n      carts.loading = false;\n    },\n    sorted: (carts, action) => {\n      carts.list.sort(function (a, b) {\n        if (action.payload.sort === \"asc\") {\n          return a.price > b.price ? 1 : -1;\n        } else if (action.payload.sort === \"desc\") {\n          return a.price < b.price ? 1 : -1;\n        } else {\n          return a.id > b.id ? 1 : -1;\n        }\n      });\n    },\n    removed: (carts, action) => {\n      carts.list = carts.list.filter(product => action.payload.id !== product.id); // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n      // carts.list.slice(index,1);\n    }\n  }\n});\nexport const {\n  added,\n  fetched,\n  removed,\n  sorted\n} = slice.actions; //export const selectAllcarts = state => state.entities.carts;\n\nexport default slice.reducer;\nexport const loadCarts = async dispatch => {\n  //const res = await fetch(\"http://localhost:5000/api/products\", { mode: 'no-cors' });\n  const res = await fetch(\"http://localhost:5000/api/carts\");\n  const cart = await res.json();\n  console.log('get from api=>', cart);\n  dispatch(fetched(cart)); //setProducts(pro);\n};","map":{"version":3,"sources":["/home/ciro/project/react-shopping-cart/src/store/cart.js"],"names":["createSlice","lastId","slice","name","initialState","list","loading","lastFetch","lastAdded","msg","reducers","added","carts","action","console","log","payload","length","index","findIndex","cart","id","product_id","user_id","parseInt","qta","price","push","fetched","sorted","sort","a","b","removed","filter","product","actions","reducer","loadCarts","dispatch","res","fetch","json"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// action types\n// we dont need anymore\nlet lastId = 0;\nconst slice = createSlice({\n    name:\"carts\",\n    initialState:{\n        list:[],\n        loading:false,\n        lastFetch:null,\n        lastAdded:null,\n        msg:''\n    },\n    reducers:{\n        added: (carts, action) => {\n            console.log(\"payload\",action.payload);\n\n            if (carts.list.length > 0) {\n                const index = carts.list.findIndex(function(cart) {\n                    //console.log(cart.id+\" == \"+action.payload.cart.product_id+\" && \"+cart.user_id+\" == \"+action.payload.cart.user_id);\n                    console.log(\"tutto \", cart.id === action.payload.cart.product_id && cart.user_id === action.payload.cart.user_id);\n                    // console.log(\"prima \", cart.id === action.payload.cart.product_id);\n                    // console.log(\"seconda \", cart.user_id === action.payload.cart.user_id);\n                    if (parseInt(cart.product_id) === parseInt(action.payload.cart.product_id) && parseInt(cart.user_id) === parseInt(action.payload.cart.user_id)){\n                        return true;\n                    }\n                    return false;\n\n                });\n                console.log(index);\n\n          \n                if (index >= 0) {\n                    carts.msg = \"The Article is already added\";\n                    carts.list[index].qta = (carts.list[index].qta ? ++carts.list[index].qta : 1);\n                    carts.list[index].price = (carts.list[index].price ? (carts.list[index].price + action.payload.cart.price) : action.payload.cart.price);\n                    //setCartItems(cartItems_clone);\n                } else {\n                    carts.msg = \"The Article added\";\n                    // setCartItems([...cartItems_clone, { ...product, qta: 1 }]);\n                    carts.list.push({\n                        ...action.payload.cart,\n                    });\n                }\n            } else {\n                carts.msg = \"The Article added\";\n                // setCartItems([{ ...product, qta: 1 }]);\n                carts.list.push({\n                    ...action.payload.cart\n                });\n            }\n\n            carts.lastAdded = { ...action.payload.cart };\n            return carts;\n\n        },\n        fetched: (carts, action) => {\n            // carts.list = action.payload;\n            carts.list = action.payload;\n            carts.loading = false;\n        },\n        sorted: (carts, action) => {\n\n            carts.list.sort(function (a, b) {\n                if (action.payload.sort === \"asc\") {\n                  return a.price > b.price ? 1 : -1;\n                } else if (action.payload.sort === \"desc\") {\n                  return a.price < b.price ? 1 : -1;\n                } else {\n                  return a.id > b.id ? 1 : -1;\n                }\n            });\n        },\n        removed: (carts, action) => {\n            carts.list = carts.list.filter(product => action.payload.id !== product.id);\n            // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n            // carts.list.slice(index,1);\n        },\n    }\n});\n\nexport const {added, fetched, removed, sorted} = slice.actions;\n//export const selectAllcarts = state => state.entities.carts;\nexport default slice.reducer;\n\nexport const loadCarts = async (dispatch) => {\n    //const res = await fetch(\"http://localhost:5000/api/products\", { mode: 'no-cors' });\n    const res = await fetch(\"http://localhost:5000/api/carts\");\n    const cart = await res.json();\n\n    console.log('get from api=>', cart);\n    dispatch(fetched(cart));\n    //setProducts(pro);\n};"]},"metadata":{},"sourceType":"module"}