{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // action types\n// we dont need anymore\n\nlet lastId = 0;\nconst slice = createSlice({\n  name: \"carts\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null,\n    lastAdded: null,\n    msg: ''\n  },\n  reducers: {\n    added: (carts, action) => {\n      console.log(\"payload\", action.payload);\n\n      if (carts.list.length > 0) {\n        const id = carts.list.findIndex(cart => cart.id === action.payload.id);\n\n        if (id >= 0) {\n          carts.msg = \"The Article is already added\";\n          carts.list[id].qta = carts.list[id].qta ? ++carts.list[id].qta : 1;\n          carts.list[id].price = carts.list[id].price ? carts.list[id].price + action.payload.price : action.payload.price; //setCartItems(cartItems_clone);\n        } else {\n          carts.msg = \"The Article added\"; // setCartItems([...cartItems_clone, { ...product, qta: 1 }]);\n        }\n      } else {\n        carts.msg = \"The Article added\"; // setCartItems([{ ...product, qta: 1 }]);\n      }\n\n      carts.list.push({\n        id: ++lastId,\n        title: action.payload.title\n      });\n      carts.lastAdded = {\n        id: lastId,\n        title: action.payload.title\n      };\n    },\n    fetched: (carts, action) => {\n      carts.list = action.payload;\n    },\n    sorted: (carts, action) => {\n      carts.list.sort(function (a, b) {\n        if (action.payload.sort === \"asc\") {\n          return a.price > b.price ? 1 : -1;\n        } else if (action.payload.sort === \"desc\") {\n          return a.price < b.price ? 1 : -1;\n        } else {\n          return a.id > b.id ? 1 : -1;\n        }\n      });\n    },\n    removed: (carts, action) => {\n      carts.list = carts.list.filter(product => action.payload.id !== product.id); // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n      // carts.list.slice(index,1);\n    }\n  }\n});\nexport const {\n  added,\n  fetched,\n  removed,\n  sorted\n} = slice.actions; //export const selectAllcarts = state => state.entities.carts;\n\nexport default slice.reducer;","map":{"version":3,"sources":["/home/ciro/project/react-shopping-cart/src/store/cart.js"],"names":["createSlice","lastId","slice","name","initialState","list","loading","lastFetch","lastAdded","msg","reducers","added","carts","action","console","log","payload","length","id","findIndex","cart","qta","price","push","title","fetched","sorted","sort","a","b","removed","filter","product","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// action types\n// we dont need anymore\nlet lastId = 0;\nconst slice = createSlice({\n    name:\"carts\",\n    initialState:{\n        list:[],\n        loading:false,\n        lastFetch:null,\n        lastAdded:null,\n        msg:''\n    },\n    reducers:{\n        added: (carts, action) => {\n            console.log(\"payload\",action.payload);\n\n            if (carts.list.length > 0) {\n                const id = carts.list.findIndex((cart) => cart.id === action.payload.id);\n          \n                if (id >= 0) {\n                    carts.msg = \"The Article is already added\";\n                    carts.list[id].qta = (carts.list[id].qta ? ++carts.list[id].qta : 1);\n                    carts.list[id].price = (carts.list[id].price ? (carts.list[id].price + action.payload.price) : action.payload.price);\n                    //setCartItems(cartItems_clone);\n                } else {\n                  carts.msg = \"The Article added\";\n                  // setCartItems([...cartItems_clone, { ...product, qta: 1 }]);\n                }\n            } else {\n                carts.msg = \"The Article added\";\n                // setCartItems([{ ...product, qta: 1 }]);\n            }\n\n            carts.list.push({\n                id:++lastId,\n                title: action.payload.title\n            });\n\n            carts.lastAdded = {\n                id: lastId,\n                title: action.payload.title\n            };\n        },\n        fetched: (carts, action) => {\n            carts.list = action.payload;\n        },\n        sorted: (carts, action) => {\n\n            carts.list.sort(function (a, b) {\n                if (action.payload.sort === \"asc\") {\n                  return a.price > b.price ? 1 : -1;\n                } else if (action.payload.sort === \"desc\") {\n                  return a.price < b.price ? 1 : -1;\n                } else {\n                  return a.id > b.id ? 1 : -1;\n                }\n            });\n        },\n        removed: (carts, action) => {\n            carts.list = carts.list.filter(product => action.payload.id !== product.id);\n            // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n            // carts.list.slice(index,1);\n        },\n    }\n});\n\nexport const {added, fetched, removed, sorted} = slice.actions;\n//export const selectAllcarts = state => state.entities.carts;\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}