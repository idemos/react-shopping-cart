{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // action types\n// we dont need anymore\n\nlet lastId = 0;\nconst slice = createSlice({\n  name: \"carts\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null,\n    lastAdded: null\n  },\n  reducers: {\n    added: (carts, action) => {\n      carts.list.push({\n        id: ++lastId,\n        description: action.payload.description,\n        resolved: false\n      });\n      carts.lastAdded = {\n        id: lastId,\n        description: action.payload.description,\n        resolved: false\n      };\n    },\n    fetched: (carts, action) => {\n      carts.list = action.payload;\n    },\n    sorted: (carts, action) => {\n      carts.list.sort(function (a, b) {\n        if (action.payload.sort === \"asc\") {\n          return a.price > b.price ? 1 : -1;\n        } else if (action.payload.sort === \"desc\") {\n          return a.price < b.price ? 1 : -1;\n        } else {\n          return a.id > b.id ? 1 : -1;\n        }\n      });\n    },\n    removed: (carts, action) => {\n      carts.list = carts.list.filter(product => action.payload.id !== product.id); // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n      // carts.list.slice(index,1);\n    }\n  }\n});\nexport const {\n  added,\n  fetched,\n  removed,\n  sorted\n} = slice.actions; //export const selectAllcarts = state => state.entities.carts;\n\nexport default slice.reducer;","map":{"version":3,"sources":["/home/ciro/project/react-shopping-cart/src/store/cart.js"],"names":["createSlice","lastId","slice","name","initialState","list","loading","lastFetch","lastAdded","reducers","added","carts","action","push","id","description","payload","resolved","fetched","sorted","sort","a","b","price","removed","filter","product","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AACA,IAAIC,MAAM,GAAG,CAAb;AACA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAC,OADiB;AAEtBC,EAAAA,YAAY,EAAC;AACTC,IAAAA,IAAI,EAAC,EADI;AAETC,IAAAA,OAAO,EAAC,KAFC;AAGTC,IAAAA,SAAS,EAAC,IAHD;AAITC,IAAAA,SAAS,EAAC;AAJD,GAFS;AAQtBC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtBD,MAAAA,KAAK,CAACN,IAAN,CAAWQ,IAAX,CAAgB;AACZC,QAAAA,EAAE,EAAC,EAAEb,MADO;AAEZc,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFhB;AAGZE,QAAAA,QAAQ,EAAE;AAHE,OAAhB;AAMAN,MAAAA,KAAK,CAACH,SAAN,GAAkB;AACdM,QAAAA,EAAE,EAAEb,MADU;AAEdc,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFd;AAGdE,QAAAA,QAAQ,EAAE;AAHI,OAAlB;AAKH,KAbI;AAcLC,IAAAA,OAAO,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACxBD,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACI,OAApB;AACH,KAhBI;AAiBLG,IAAAA,MAAM,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAEvBD,MAAAA,KAAK,CAACN,IAAN,CAAWe,IAAX,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B,YAAIV,MAAM,CAACI,OAAP,CAAeI,IAAf,KAAwB,KAA5B,EAAmC;AACjC,iBAAOC,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhC;AACD,SAFD,MAEO,IAAIX,MAAM,CAACI,OAAP,CAAeI,IAAf,KAAwB,MAA5B,EAAoC;AACzC,iBAAOC,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAhC;AACD,SAFM,MAEA;AACL,iBAAOF,CAAC,CAACP,EAAF,GAAOQ,CAAC,CAACR,EAAT,GAAc,CAAd,GAAkB,CAAC,CAA1B;AACD;AACJ,OARD;AASH,KA5BI;AA6BLU,IAAAA,OAAO,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAmB;AACxBD,MAAAA,KAAK,CAACN,IAAN,GAAaM,KAAK,CAACN,IAAN,CAAWoB,MAAX,CAAkBC,OAAO,IAAId,MAAM,CAACI,OAAP,CAAeF,EAAf,KAAsBY,OAAO,CAACZ,EAA3D,CAAb,CADwB,CAExB;AACA;AACH;AAjCI;AARa,CAAD,CAAzB;AA6CA,OAAO,MAAM;AAACJ,EAAAA,KAAD;AAAQQ,EAAAA,OAAR;AAAiBM,EAAAA,OAAjB;AAA0BL,EAAAA;AAA1B,IAAoCjB,KAAK,CAACyB,OAAhD,C,CACP;;AACA,eAAezB,KAAK,CAAC0B,OAArB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// action types\n// we dont need anymore\nlet lastId = 0;\nconst slice = createSlice({\n    name:\"carts\",\n    initialState:{\n        list:[],\n        loading:false,\n        lastFetch:null,\n        lastAdded:null\n    },\n    reducers:{\n        added: (carts, action) => {\n            carts.list.push({\n                id:++lastId,\n                description: action.payload.description,\n                resolved: false\n            });\n\n            carts.lastAdded = {\n                id: lastId,\n                description: action.payload.description,\n                resolved: false\n            };\n        },\n        fetched: (carts, action) => {\n            carts.list = action.payload;\n        },\n        sorted: (carts, action) => {\n\n            carts.list.sort(function (a, b) {\n                if (action.payload.sort === \"asc\") {\n                  return a.price > b.price ? 1 : -1;\n                } else if (action.payload.sort === \"desc\") {\n                  return a.price < b.price ? 1 : -1;\n                } else {\n                  return a.id > b.id ? 1 : -1;\n                }\n            });\n        },\n        removed: (carts, action) => {\n            carts.list = carts.list.filter(product => action.payload.id !== product.id);\n            // const index = carts.list.findIndex(product => action.payload.id !== product.id);\n            // carts.list.slice(index,1);\n        },\n    }\n});\n\nexport const {added, fetched, removed, sorted} = slice.actions;\n//export const selectAllcarts = state => state.entities.carts;\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}