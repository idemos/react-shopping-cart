{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // action types\n// we dont need anymore\n\nlet lastId = 0;\nconst slice = createSlice({\n  name: \"products\",\n  initialState: {\n    list: [],\n    loading: true,\n    status: false,\n    lastFetch: null\n  },\n  reducers: {\n    added: (products, action) => {\n      products.list.push({\n        id: ++lastId,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    fetched: (products, action) => {\n      products.list = action.payload;\n      products.loading = false; // return action.payload;\n      // const newEntities = {};\n      // action.payload.forEach((product) => {\n      //   newEntities[product.id] = product\n      // });\n      // products.list = newEntities;\n    },\n    sorted: (products, action) => {\n      products.list.sort(function (a, b) {\n        if (action.payload.sort === \"asc\") {\n          return a.price > b.price ? 1 : -1;\n        } else if (action.payload.sort === \"desc\") {\n          return a.price < b.price ? 1 : -1;\n        } else {\n          return a.id > b.id ? 1 : -1;\n        }\n      });\n    },\n    actived: (products, action) => {\n      const index = products.list.findIndex(product => action.payload.id !== product.id);\n      products.list[index].actived = true;\n    },\n    removed: (products, action) => {\n      products.list = products.list.filter(product => action.payload.id !== product.id); // const index = products.list.findIndex(product => action.payload.id !== product.id);\n      // products.list.slice(index,1);\n    }\n  }\n});\nexport const {\n  added,\n  fetched,\n  removed,\n  sorted\n} = slice.actions; //export const selectAllProducts = state => state.entities.products;\n\nexport default slice.reducer;\nexport const loadProducts = async dispatch => {\n  //const res = await fetch(\"http://localhost:5000/api/products\", { mode: 'no-cors' });\n  const res = await fetch(\"http://localhost:5000/api/products\");\n  const pro = await res.json();\n  console.log('get from api=>', pro); //dispatch(fetched(pro));\n  //setProducts(pro);\n}; //export const getProducts = (state) => state.entities.products;","map":{"version":3,"sources":["/home/ciro/project/react-shopping-cart/src/store/product.js"],"names":["createSlice","lastId","slice","name","initialState","list","loading","status","lastFetch","reducers","added","products","action","push","id","description","payload","resolved","fetched","sorted","sort","a","b","price","actived","index","findIndex","product","removed","filter","actions","reducer","loadProducts","dispatch","res","fetch","pro","json","console","log"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// action types\n// we dont need anymore\nlet lastId = 0;\nconst slice = createSlice({\n    name:\"products\",\n    initialState:{\n        list:[],\n        loading:true,\n        status:false,\n        lastFetch:null\n    },\n    reducers:{\n        added: (products, action) => {\n            products.list.push({\n                id:++lastId,\n                description: action.payload.description,\n                resolved: false\n            });\n        },\n        fetched: (products, action) => {\n            products.list = action.payload;\n            products.loading = false;\n            // return action.payload;\n\n            // const newEntities = {};\n            // action.payload.forEach((product) => {\n            //   newEntities[product.id] = product\n            // });\n            // products.list = newEntities;\n\n        },\n        sorted: (products, action) => {\n\n            products.list.sort(function (a, b) {\n                if (action.payload.sort === \"asc\") {\n                  return a.price > b.price ? 1 : -1;\n                } else if (action.payload.sort === \"desc\") {\n                  return a.price < b.price ? 1 : -1;\n                } else {\n                  return a.id > b.id ? 1 : -1;\n                }\n            });\n        },\n        actived: (products, action) => {\n            const index = products.list.findIndex(product => action.payload.id !== product.id);\n            products.list[index].actived = true;\n        },\n        removed: (products, action) => {\n            products.list = products.list.filter(product => action.payload.id !== product.id);\n            // const index = products.list.findIndex(product => action.payload.id !== product.id);\n            // products.list.slice(index,1);\n        },\n    }\n});\n\nexport const {added, fetched, removed, sorted} = slice.actions;\n//export const selectAllProducts = state => state.entities.products;\nexport default slice.reducer;\n\nexport const loadProducts = async (dispatch) => {\n    //const res = await fetch(\"http://localhost:5000/api/products\", { mode: 'no-cors' });\n    const res = await fetch(\"http://localhost:5000/api/products\");\n    const pro = await res.json();\n\n    console.log('get from api=>',pro);\n    //dispatch(fetched(pro));\n    //setProducts(pro);\n};\n\n//export const getProducts = (state) => state.entities.products;\n\n"]},"metadata":{},"sourceType":"module"}